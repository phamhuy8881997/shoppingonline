import "./buyProduct.css";
import React, { Component } from "react";

import * as action from "./../../redux/action/index";
import { connect } from "react-redux";
import { toast } from "react-toastify";

class BuyProduct extends Component {
  constructor(props) {
    super(props);
    this.state = {
      URname: "",
      URphone: "",
      URdc: "",
      URsex: 1,
      noteText: "",
      mdh: "00000000",
    };
  }
  /*=======================================*/
  componentDidMount() {}
  /*=======================================*/
  onchange = (event) => {
    var target = event.target;
    var name = target.name;
    var value = target.value;
    this.setState({
      [name]: value,
    });
  };
  /*=======================================*/
  onclick = () => {
    var { history } = this.props;
    history.goBack();
  };
  /*------------------  */
  /*-----------------	*/
  render() {
    var { URname, URphone, URdc, URsex, noteText, mdh } = this.state;
    URsex = parseInt(URsex);
    let login = JSON.parse(localStorage.getItem("loginF"));
    //let product_shop=JSON.parse(localStorage.getItem('ITEM'));
    return (
      <React.Fragment>
        {login === null ? (
          <div className="buy-product-shop text-center">
            <h1>Ki·ªÉm Tra ƒê∆°n H√†ng Thanh To√°n</h1>
            <div className="row text-center bg-Buy">
              <div className="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <table className="table table-bordered table-hover">
                  <thead>
                    <tr>
                      <th>STT</th>
                      <th>Name</th>
                      <th>Image</th>
                      <th>SLL</th>
                      <th>ƒê∆°n Gi√°</th>
                    </tr>
                  </thead>
                  {this.showTable()}
                </table>
              </div>
            </div>

            <button
              type="button"
              className="btn btn-primary btnBack"
              onClick={this.onclick}
            >
              Quay L·∫°i
            </button>

            <div className="row bg-Buy">
              <div className="col-xs-12 col-sm-12 col-md-6 col-lg-6">
                <div className="textUser">
                  <h2>X√°c Nh·∫≠n Th√¥ng Tin</h2>
                  <hr />
                  <p>
                    T√™n: <span>{URname}</span>
                  </p>
                  <p>
                    Gi·ªõi T√≠nh: <span>{URsex === 1 ? " Nam" : " N·ªØ"}</span>
                  </p>
                  <p>
                    ƒê·ªãa Ch·ªâ: <span>{URdc}</span>
                  </p>
                  <p>
                    SDT: <span>{URphone}</span>
                  </p>
                  <p id="note-text1">Ghi Ch√∫ : {noteText}</p>
                </div>
              </div>
              <div
                className="col-xs-12 col-sm-12 col-md-6 col-lg-6"
                id="inputUser"
              >
                {this.showTextUser()}
              </div>

              <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <h4 style={{ color: "#fc0" }}>{mdh}</h4>
                <button
                  type="button"
                  class="btn btn-primary"
                  id="mdh"
                  onClick={() => this.madonhang()}
                >
                  L·∫•y M√£ ƒê∆°n H√†ng
                </button>
              </div>

              <p id="luuY">
                **L∆∞u √Ω: Anh(Ch·ªã) vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin v√† ki·ªÉm tra
                tr∆∞·ªõc khi x√°c nh·∫≠n th√¥ng tin mua h√†ng. b√™n em s·∫Ω li√™n h·ªá
                Anh(Ch·ªã) qua s·ªë sdt s·ªõm nh·∫•t. Xin c·∫£m ∆°n!
                <p>
                  **s·ªë ti·ªÅn % chi·∫øt kh·∫•u h√≥a ƒë∆°n tr√™n 1000 USD s·∫Ω chi·∫øt kh·∫•u 1%
                  d∆∞·ªõi 1000 USD l√† 0%
                </p>
                <p style={{ color: "aqua" }}>
                  *** kh√°ch h√†ng vui l√≤ng sao ch√©p m√£ ƒë∆°n h√†ng ƒë·ªÉ tra c·ª©u ƒë∆°n
                  h√†ng{" "}
                </p>
              </p>
            </div>
            <button
              type="button"
              className="btn btn-warning"
              id="Submit-buy"
              onClick={() => this.updataSever()}
            >
              X√°c Nh·∫≠n Mua H√†ng
            </button>
          </div>
        ) : (
          <div id="login-buy">
            <h2>Vui L√≤ng ƒêƒÉng Nh·∫≠p ƒê·ªÉ Thanh To√°n Mua H√†ng</h2>
          </div>
        )}
      </React.Fragment>
    );
  }
  /*============show table=====================*/
  showTable = () => {
    return (
      <tbody>
        {this.showDataTable()}
        <tr style={{ backgroundColor: "rgba(25,0,230,0.3)" }}>
          <td>T·ªïng Ti·ªÅn ƒê∆°n H√†ng</td>
          <td>{this.showTotal()} USD</td>
          <td></td>
          <td>Sale 1%</td>
          <td>{this.showSale()} USD</td>
        </tr>
        <tr style={{ backgroundColor: "rgba(140,0,230,0.3)" }}>
          <td>T·ªïng Ti·ªÅn C·∫ßn Th√†nh to√°n</td>
          <td>{this.showTotalafterSale()} USD</td>
          <td></td>
          <td></td>
          <td></td>
        </tr>
      </tbody>
    );
  };
  /*============show data table====================*/
  showDataTable = () => {
    var resule = "";
    let product_shop = JSON.parse(localStorage.getItem("ITEM"));
    var cartshop = product_shop;
    resule = cartshop.map((item, index) => {
      return (
        <tr key={index}>
          <td>{index + 1}</td>
          <td>{item.product.name}</td>
          <td>
            <img
              src={
                require(`./../../image/img/${item.product.image}.jpg`).default
              }
              alt="..."
            />
          </td>
          <td>{item.sll}</td>
          <td>{item.product.price} USD /1SP</td>
        </tr>
      );
    });
    return resule;
  };
  /*==============show total========================*/
  showTotal = () => {
    let product_shop = JSON.parse(localStorage.getItem("ITEM"));
    var cartshop = product_shop;
    var total = 0;
    for (let i = 0; i < cartshop.length; i++) {
      total += cartshop[i].product.price * cartshop[i].sll;
    }
    return total;
  };
  /*================show sale=====================*/
  showSale = () => {
    let product_shop = JSON.parse(localStorage.getItem("ITEM"));
    var cartshop = product_shop;
    var total = 0;
    var saleOf = 0;
    for (let i = 0; i < cartshop.length; i++) {
      total += cartshop[i].product.price * cartshop[i].sll;
    }
    if (total > 1000) {
      saleOf = Math.round(total * 0.01);
    } else {
      saleOf = 0;
    }
    return saleOf;
  };
  /*=========show total sale========================*/
  showTotalafterSale = () => {
    let product_shop = JSON.parse(localStorage.getItem("ITEM"));
    var cartshop = product_shop;
    var total = 0;
    var saleOf = 0;
    for (let i = 0; i < cartshop.length; i++) {
      total += cartshop[i].product.price * cartshop[i].sll;
    }
    if (total > 1000) {
      saleOf = Math.round(total * 0.01);
    } else {
      saleOf = 0;
    }
    var GetTotal = total - saleOf;
    return GetTotal;
  };
  /*==============show text user=====================*/
  showTextUser = () => {
    var { URname, URphone, URdc, URsex, noteText } = this.state;
    URsex = parseInt(URsex);
    return (
      <div>
        <h2>Nh·∫≠p Th√¥ng Tin</h2>
        <p>
          T√™n:{" "}
          <input
            type="text"
            className="form-control"
            name="URname"
            value={URname}
            onChange={this.onchange}
          />
        </p>
        <p>
          Gi·ªõi T√≠nh
          <select
            className="form-control"
            name="URsex"
            value={URsex}
            onChange={this.onchange}
          >
            <option value={0}>N·ªØ</option>
            <option value={1}>Nam</option>
          </select>
        </p>
        <p>
          ƒê·ªãa Ch·ªâ:
          <input
            type="text"
            className="form-control"
            name="URdc"
            value={URdc}
            onChange={this.onchange}
          />
        </p>
        <p>
          SDT:
          <input
            type="text"
            className="form-control"
            name="URphone"
            value={URphone}
            onChange={this.onchange}
          />
        </p>
        <p>
          Ghi ch√∫:
          <input
            type="text"
            name="noteText"
            class="form-control"
            value={noteText}
            onChange={this.onchange}
          />
        </p>
      </div>
    );
  };
  /*==============show text user====================*/
  /*=============lay ma don hang ===================*/
  madonhang = () => {
    let mdh = Math.floor(
      Math.random() * 10102965301 +
        Math.random() * 90714781 +
        129 +
        Math.random() * 191 +
        Math.random() * 939247219
    );
    this.setState({
      mdh: mdh.toString(),
    });
  };
  /*=============lay ma don hang ===================*/
  /*===============updatasever======================*/
  updataSever = () => {
    let product_shop = JSON.parse(localStorage.getItem("ITEM"));
    var cartshop = product_shop;
    var { URname, URphone, URdc, URsex, noteText, mdh } = this.state;
    var user = {
      nameUR: URname,
      phoneUR: URphone,
      dcUR: URdc,
      sexUR: URsex,
      note: noteText,
    };
    var mdhUP = { mdh: mdh };
    var data_up = { cartshop, user, mdhUP };
    var vnf_regex = /((09|03|07|08|05)+([0-9]{8})\b)/g;
    var URname_regex = /(cc|dd)/i;
    var { history } = this.props;
    console.log(cartshop);
    if (URname === "" || URdc === "" || URphone === "") {
      //window.alert('b·∫°n ch∆∞a nh·∫≠p ƒë·ªß th√¥ng tin vui l√≤ng ki·ªÉm tra l·∫°i');
      toast.info(`ü¶ù b·∫°n ch∆∞a nh·∫≠p ƒë·ªß th√¥ng tin vui l√≤ng ki·ªÉm tra l·∫°i ! `, {
        position: "top-center",
        autoClose: 3000,
      });
    } else if (URname_regex.test(URname) === true) {
      //window.alert("ten ban nhap ko hop le");
      toast.warn(`ü¶ù t√™n b·∫°n nh·∫≠p kh√¥ng h·ª£p l·ªá !! `, {
        position: "top-center",
        autoClose: 3000,
      });
    } else if (vnf_regex.test(URphone) === false) {
      /*var vnf_regex = /((09|03|07|08|05)+([0-9]{8})\b)/g;
    	if(vnf_regex.test(URphone) === false){
    		window.alert('s·ªë di·ªán tho·∫°i c·ªßa b·∫°n kh√¥ng h·ª£p l·ªá!!');
    	}*/
      toast.error(`ü¶ù s·ªë di·ªán tho·∫°i c·ªßa b·∫°n kh√¥ng h·ª£p l·ªá!! `, {
        position: "top-center",
        autoClose: 3000,
      });
      //window.alert('s·ªë di·ªán tho·∫°i c·ªßa b·∫°n kh√¥ng h·ª£p l·ªá!!');
    } else if (cartshop.length <= 0) {
      toast.success(
        `ü¶ù Gi·ªè h√†ng ch∆∞a c√≥ s·∫£n ph·∫©m n√†o, ch·ªçn th√™m s·∫£n ph√¢m tr∆∞·ªõc khi thanh to√°n xin c·∫£m ∆°n ! `,
        { position: "top-center", autoClose: 3000 }
      );
      //window.alert('Gi·ªè h√†ng ch∆∞a c√≥ s·∫£n ph·∫©m n√†o, ch·ªçn th√™m s·∫£n ph√¢m tr∆∞·ªõc khi thanh to√°n xin c·∫£m ∆°n');
    } else if (mdh === "00000000") {
      toast.dark(
        `ü¶ù b·∫°n ch∆∞a l·∫•y m√£ ƒë∆°n h√†ng vui l√≤ng nh·∫•n n√∫t l·∫•y m√£ ƒë∆°n h√†ng tr∆∞·ªõc khi thanh to√°n ! `,
        { position: "top-center", autoClose: 3000 }
      );
      //window.alert('b·∫°n ch∆∞a l·∫•y m√£ ƒë∆°n h√†ng vui l√≤ng nh·∫•n n√∫t l·∫•y m√£ ƒë∆°n h√†ng tr∆∞·ªõc khi thanh to√°n');
    } else {
      if (window.confirm("b·∫°n c√≥ ch·∫Øc mu·ªën thanh to√°n??")) {
        this.props.dataSever(data_up);
        window.alert("thanh to√°n ƒë∆°n h√†ng th√†nh c√¥ng!!!!");
        window.alert(
          "anh(ch·ªã) xin ƒë·ªÉ √Ω di·ªán tho·∫°i b√™n em s·∫Ω g·ªçi x√°c nh·∫≠n ƒë∆°n h√†ng. Xin c·∫£m ∆°n!!!"
        );
        window.alert(
          `m√£ ƒë∆°n h√†ng c·ªßa b·∫°n:  ${mdh}  tra c·ª©u ƒë∆°n h√†ng ƒë√£ ƒë·∫∑t ·ªü menu ƒë·∫ßu trang ch·ªß g√≥c b√™n ph·∫£i m√†n h√¨nh`
        );
        localStorage.removeItem("ITEM");
        history.goBack();
      }
    }
  };
  /*===============updatasever======================*/

  /*=======================================*/
  /*=======================================*/
}

var mapStateToProp = (state) => {
  return {
    cartshop: state.cartshop,
  };
};
var mapDispathToProp = (dispath, props) => {
  return {
    dataSever: (data) => {
      dispath(action.up_data_sever_api(data));
    },
  };
};
export default connect(mapStateToProp, mapDispathToProp)(BuyProduct);
